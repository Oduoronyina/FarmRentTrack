service: () -> {
    addAnimal: (record {ageRange:text; name:text; description:text; breed:text; species:text}) -> (variant {Ok:record {id:text; ageRange:text; name:text; description:text; breed:text; species:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    addAnimalToFarmSection: (text, text) -> (variant {Ok:record {id:text; ageRange:text; name:text; description:text; breed:text; species:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    addFarmSection: (record {rentPrice:nat64; name:text}) -> (variant {Ok:record {id:text; renter:opt text; rentPrice:nat64; owner:principal; name:text; animals:vec record {id:text; ageRange:text; name:text; description:text; breed:text; species:text}; state:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    addRenter: (text) -> (variant {Ok:record {id:text; renter:principal; name:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    completeReservePayment: (principal, text, nat64, nat64, nat64) -> (variant {Ok:record {status:variant {PaymentPending:text; Completed:text}; farmSectionId:text; memo:nat64; reservor:principal; price:nat64; paid_at_block:opt nat64}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    createReservePaymentOrder: (text) -> (variant {Ok:record {status:variant {PaymentPending:text; Completed:text}; farmSectionId:text; memo:nat64; reservor:principal; price:nat64; paid_at_block:opt nat64}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    deleteAnimal: (text) -> (variant {Ok:record {id:text; ageRange:text; name:text; description:text; breed:text; species:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    deleteFarmSection: (text) -> (variant {Ok:record {id:text; renter:opt text; rentPrice:nat64; owner:principal; name:text; animals:vec record {id:text; ageRange:text; name:text; description:text; breed:text; species:text}; state:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    deleteRenter: (text) -> (variant {Ok:record {id:text; renter:principal; name:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    getAddressFromPrincipal: (principal) -> (text) query;
    getAnimal: (text) -> (variant {Ok:record {id:text; ageRange:text; name:text; description:text; breed:text; species:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}}) query;
    getAnimals: () -> (vec record {id:text; ageRange:text; name:text; description:text; breed:text; species:text}) query;
    getFarmSection: (text) -> (variant {Ok:record {id:text; renter:opt text; rentPrice:nat64; owner:principal; name:text; animals:vec record {id:text; ageRange:text; name:text; description:text; breed:text; species:text}; state:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}}) query;
    getFarmSectionAnimals: (text) -> (vec record {id:text; ageRange:text; name:text; description:text; breed:text; species:text}) query;
    getFarmSections: () -> (vec record {id:text; renter:opt text; rentPrice:nat64; owner:principal; name:text; animals:vec record {id:text; ageRange:text; name:text; description:text; breed:text; species:text}; state:text}) query;
    getRenter: (text) -> (variant {Ok:record {id:text; renter:principal; name:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}}) query;
    getRenters: () -> (vec record {id:text; renter:principal; name:text}) query;
    removeAnimalFromFarmSection: (text, text) -> (variant {Ok:record {id:text; ageRange:text; name:text; description:text; breed:text; species:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    rentFarmSection: (text, text) -> (variant {Ok:record {id:text; renter:opt text; rentPrice:nat64; owner:principal; name:text; animals:vec record {id:text; ageRange:text; name:text; description:text; breed:text; species:text}; state:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    returnFarmSection: (text) -> (variant {Ok:record {id:text; renter:opt text; rentPrice:nat64; owner:principal; name:text; animals:vec record {id:text; ageRange:text; name:text; description:text; breed:text; species:text}; state:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    updateAnimal: (record {id:text; ageRange:text; name:text; description:text; breed:text; species:text}) -> (variant {Ok:record {id:text; ageRange:text; name:text; description:text; breed:text; species:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    updateFarmSection: (record {id:text; renter:opt text; rentPrice:nat64; owner:principal; name:text; animals:vec record {id:text; ageRange:text; name:text; description:text; breed:text; species:text}; state:text}) -> (variant {Ok:record {id:text; renter:opt text; rentPrice:nat64; owner:principal; name:text; animals:vec record {id:text; ageRange:text; name:text; description:text; breed:text; species:text}; state:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    updateRenter: (record {id:text; renter:principal; name:text}) -> (variant {Ok:record {id:text; renter:principal; name:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    verifyPayment: (principal, nat64, nat64, nat64) -> (bool) query;
}
